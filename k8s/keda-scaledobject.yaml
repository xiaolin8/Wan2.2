apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: wan22-rayservice-scaler
spec:
  # 1. Scale Target: Point to the RayService we want KEDA to manage.
  scaleTargetRef:
    apiVersion: ray.io/v1      # The API group of RayService
    kind: RayService          # The resource kind
    name: wan22-rayservice    # The name of the RayService created in rayservice.yaml

  # Polling interval for KEDA to check the trigger source
  pollingInterval: 15

  # 2. Scaling Parameters
  minReplicaCount: 0          # Allow scaling down to zero when idle
  maxReplicaCount: 1          # IMPORTANT: For RayService, KEDA scales the entire service (on/off). The number of workers is defined inside RayService.
  cooldownPeriod: 300 # Wait 5 minutes after the queue is empty before scaling down to 0
  
  # Advanced options for scaling behavior
  advanced:
    restoreToOriginalReplicaCount: true # When KEDA is deactivated, revert to the replica count in the YAML
    horizontalPodAutoscalerConfig:
      behavior: # Control the scale-up/down speed
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 100
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15

  # 3. Trigger: Define what event should cause a scale-up.
  triggers:
  - type: redis
    metadata:
      # The address of your Redis server
      address: "redis-master.redis.svc.cluster.local:6379"
      # We are monitoring a STREAM data structure for waiting tasks
      listName: "wan22-task-queue" # The name of the Redis Stream for new tasks
      # The number of messages in the stream required to trigger a scale-up from zero
      listLength: "1"
      # Specify that the Redis key is a Stream
      isStream: "true"
    # If your Redis requires authentication, use a TriggerAuthentication resource
    # authenticationRef:
    #   name: redis-auth